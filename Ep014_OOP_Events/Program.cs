using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ep014_OOP_Events
{
    class Program // in terms of Event -- this class is called → Subscriber
    {
        static void Main(string[] args)
        {
            // Def.: Events enable a class or object to notify other classes
            //       or objects when something of interest occurs.
            // Event is commonly assoisated with Delegate.


            // create an object(instance) of the Stock class
            var stock = new Stock("Facebook");
            stock.Price = 100;

            // subscribe to the event -- meaning that you're interested to this event.
            stock.OnPriceChanged += Stock_OnPriceChanged; // this method is auto generated by the compiler and will                                                be called when event is fired.


            stock.ChangeStockPriceBy(0.05m);
            stock.ChangeStockPriceBy(-0.02m);
            stock.ChangeStockPriceBy(0.00m);

            Console.ReadKey();
        }

        private static void Stock_OnPriceChanged(Stock stock, decimal OldPrice)
        {
            string result = "";
            // make my own condition
            if(stock.Price > OldPrice)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                result = "↑"; // to get the arrow type: alt + 24
            }
            else if (OldPrice > stock.Price)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                result = "↓"; // to get the arrow type: alt + 25 
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                result = "▬";
            }
            Console.WriteLine($"Stock Name: {stock.Name} -- Price: ${stock.Price} -- Status: {result}");
        }
    }

    // Delegate
    public delegate void stockPriceChangeHandler(Stock stock, decimal OldPrice);



    public class Stock // in terms of Event -- this class is called → Publisher
    {
        // fields
        private string name;
        private decimal price;

        // Event
        public event stockPriceChangeHandler OnPriceChanged;

        // properties
        public string Name => this.name; // readonly
        public decimal Price { get => this.price; set => this.price = value; } // get and set

        // constrcutor
        public Stock(string stockName)
        {
            this.name = stockName;
        }

        // method -- (function)
        public void ChangeStockPriceBy(decimal percent)
        {
            // store the price before changing as old price.
            decimal OldPrice = this.price;

            // changing the price
            this.price += Math.Round(this.price * percent, 2);

            // if there is a subscriber.
            if (OnPriceChanged != null)
            {
                // then fire the event.
                OnPriceChanged(this, OldPrice);
            }

        }

    }
}
